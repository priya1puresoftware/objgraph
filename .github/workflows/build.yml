# NB: this name is used in the status badge
name: build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
  schedule:
    - cron: "0 5 * * 6"  # 5:00 UTC every Saturday

jobs:
  build:
    name: Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version:
          - "3.8"

    steps:
      - name: Install OS dependencies
        run: sudo apt-get update && sudo apt-get install -y graphviz

      - name: Git clone
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: "${{ matrix.python-version }}"

      - name: Pip cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install -U pip
          python setup.py install && pip install objgraph
          python -m pip install -U setuptools wheel
          python -m pip install -U coverage coverage-python-version coveralls
          python -m pip install -e .[test]

      - name: Run tests
        run: coverage run tests.py

      - name: Check test coverage
        run: coverage report -m --fail-under=100

      - name: Report to coveralls
        run: coveralls
        if: "matrix.python-version != '2.7' && matrix.python-version != 'pypy2'"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_SERVICE_NAME: github

  test_arm64: 
     runs-on: ubuntu-latest
     strategy:
      matrix:
        python-version: [3.8]
      fail-fast: false
     steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
      - name: Install and Run tests
        run: |
               docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
               arm64v8/ubuntu:20.04 \
               bash -exc 'apt-get update && apt-get -y install python3.8 curl git && \
                ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime && export DEBIAN_FRONTEND=noninteractive && apt-get install -y tzdata && dpkg-reconfigure --frontend noninteractive tzdata && \
                apt-get -y install software-properties-common && add-apt-repository ppa:deadsnakes/ppa && apt-get -y update && \
                apt install -y python3-pip python3.8-venv && python3.8 -m venv venv38 && source venv38/bin/activate && \
                apt-get update && apt-get install -y graphviz && \
                uname -m && \
                python3.8 -m pip install -U pip && \
                python3.8 setup.py install && pip3 install objgraph && \
                python3.8 -m pip install -U setuptools wheel && \
                python3.8 -m pip install -U coverage coverage-python-version coveralls && \
                python3.8 -m pip install -e .[test] && \
                coverage run tests.py && \
                deactivate'

